group 'io.github.morichan'
version '1.0.0-snapshot'

buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url "https://repo.eclipse.org/content/groups/releases/"
        }
    }
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.+'
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.+'
        classpath "org.openjfx:javafx-plugin:0.0.7"
        classpath "org.beryx:badass-jlink-plugin:2.10.1"
    }
}

apply plugin: 'application'
apply plugin: 'java'
apply plugin: 'spring-boot'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'antlr'
apply plugin: "org.openjfx.javafxplugin"
apply plugin: "org.beryx.jlink"
apply plugin: 'jacoco'

application {
    mainClassName = 'io.github.morichan.retuss.test.CPPAnalyzerTest'
}

mainClassName = 'io.github.morichan.retuss.RetussWindow'

sourceCompatibility = '11'
targetCompatibility = '11'
tasks.withType(AbstractCompile)*.options*.encoding =
        tasks.withType(GroovyCompile)*.groovyOptions*.encoding =
                javadoc.options.encoding =
                        javadoc.options.charSet = 'UTF-8'

repositories {
    mavenCentral()
}

def generatedSourcesDir = "src/main/java/io/github/morichan/retuss/parser/cpp"

dependencies {
    antlr 'org.antlr:antlr4:4.7.2'
    implementation 'org.antlr:antlr4-runtime:4.7.2'
    implementation 'io.github.morichan:fescue:2.1.1'
    implementation 'org.fxmisc.richtext:richtextfx:0.10.0'
    implementation 'com.github.javaparser:javaparser-symbol-solver-core:3.23.1'
    implementation (fileTree(dir: 'libs', include: ['plantuml-mit-1.2024.7.jar']))

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.0-M1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.0-M1'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.3.0-M1'
    testImplementation 'org.mockito:mockito-core:2.+'
    testImplementation 'org.powermock:powermock-api-mockito-common:1+'
    testImplementation 'org.jmockit:jmockit:1.38'
    testImplementation 'org.assertj:assertj-core:3.10.0'
    testImplementation 'net.java.quickcheck:quickcheck:0.6'
    testImplementation 'org.testfx:testfx-junit5:4.0.13-alpha'
    testImplementation "org.testfx:openjfx-monocle:8u76-b04"

    testCompileOnly 'org.apiguardian:apiguardian-api:1.0.0'
}

task copyParserBase(type: Copy) {
    from 'libs/CPP14ParserBase.java'
    into generatedSourcesDir
    // 生成ディレクトリが存在する場合のみ実行
    onlyIf {
        file(generatedSourcesDir).exists()
    }
}

// ディレクトリ作成タスクを定義
task createDirectories {
    doLast {
        file(generatedSourcesDir).mkdirs()
    }
}

generateGrammarSource {
    maxHeapSize = "64m"
    outputDirectory = file(generatedSourcesDir)
    arguments = [
        "-visitor",
        "-listener",
        "-package", "io.github.morichan.retuss.parser.cpp",
        "-encoding", "UTF-8",
        "-lib", "src/main/antlr"
    ]
   // createDirectoriesタスクに依存
    dependsOn createDirectories
    doFirst {
        file(generatedSourcesDir).deleteDir()
        file(generatedSourcesDir).mkdirs()
    }

        // 生成後にParserBaseをコピー
    finalizedBy copyParserBase
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        antlr {
            srcDir 'src/main/antlr'
        }
    }
}

if (gradle.startParameter.taskNames.contains('uploadArchives')) {
    apply from: 'build.publish.gradle'
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}

javafx {
    version = "17"
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.web' ]
}

jlink {
    launcher {
        name = 'hellofx'
    }
}

junitPlatformTest {
    jvmArgs "-Djdk.attach.allowAttachSelf"
}

test {
    systemProperties 'property': 'value'
}

class OSChecker {
    static String getFamily() {
        String os = System.getProperty("os.name")
        if (os != null && os.startsWith("Windows")) return "windows"
        else return "not windows"
    }
}

println ">>> Tests is run in this OS be " + OSChecker.getFamily()

task setWithoutGUITests() {
    junitPlatform.filters.tags.exclude "GUITests"
}

if (OSChecker.getFamily() != "windows") {
    junitPlatform.filters.tags.exclude "GUITests"
}

junitPlatform.enableStandardTestTask true

jacoco {
    toolVersion = '0.+'
    applyTo junitPlatformTest
}

junitPlatformTest {
    jacoco {
        destinationFile = file("${buildDir}/jacoco/test.exec")
    }
}

jacocoTestReport {
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/Main*'])
        })
    }
    reports {
        xml.enabled = true
        csv.enabled = false
        html.enabled = true
    }
}


clean {
   delete generatedSourcesDir
}


compileJava {
    dependsOn generateGrammarSource
    options.encoding = 'UTF-8'
}

// タスクの依存関係を設定
generateGrammarSource.finalizedBy copyParserBase
compileJava.dependsOn generateGrammarSource